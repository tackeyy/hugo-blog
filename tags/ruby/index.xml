<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on F.C. BigDecimal | Web開発や読んだ本のはなし</title>
    <link>http://blog.tackeyy.org/tags/ruby/</link>
    <description>Recent content in Ruby on F.C. BigDecimal | Web開発や読んだ本のはなし</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Sun, 10 Jul 2016 14:35:10 +0900</lastBuildDate>
    <atom:link href="http://blog.tackeyy.org/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>楽しいRubyを読んでみた</title>
      <link>http://blog.tackeyy.org/2016/07/10/%E6%A5%BD%E3%81%97%E3%81%84ruby%E3%82%92%E8%AA%AD%E3%82%93%E3%81%A7%E3%81%BF%E3%81%9F</link>
      <pubDate>Sun, 10 Jul 2016 14:35:10 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/2016/07/10/%E6%A5%BD%E3%81%97%E3%81%84ruby%E3%82%92%E8%AA%AD%E3%82%93%E3%81%A7%E3%81%BF%E3%81%9F</guid>
      <description>

&lt;h4 id=&#34;気づいたこと:559440eef9f1bed3ad0423ed4b4940fe&#34;&gt;気づいたこと&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;コメントアウトは &lt;code&gt;=begin =end&lt;/code&gt; で書ける&lt;/li&gt;
&lt;li&gt;正規表現は、 ` /パターン/ =~ マッチングしたい文字列&lt;/li&gt;
&lt;li&gt;メソッドのスコープをプログラム上で変更できる&lt;/li&gt;
&lt;li&gt;alias,undef -&amp;gt; 継承先でこんなん使うとやばそう&lt;/li&gt;
&lt;li&gt;ダックタイピングについて調べる&lt;/li&gt;
&lt;li&gt;p.172 論理演算子の応用&lt;/li&gt;
&lt;li&gt;範囲演算子&lt;/li&gt;
&lt;li&gt;Proc引数&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;javaと違うこと:559440eef9f1bed3ad0423ed4b4940fe&#34;&gt;Javaと違うこと&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Javaで言うMap（HashMap, TreeMapとかとか）をRubyではハッシュって言う&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;シンボルっていつ使うんや&lt;/li&gt;
&lt;li&gt;loop, until, redoは使ったことない&lt;/li&gt;
&lt;li&gt;関数的メソッドってなんや&lt;/li&gt;
&lt;li&gt;ブロックつきメソッド yield p.117&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>モンキーパッチ</title>
      <link>http://blog.tackeyy.org/2016/06/14/monkey-patch</link>
      <pubDate>Tue, 14 Jun 2016 20:28:37 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/2016/06/14/monkey-patch</guid>
      <description>

&lt;p&gt;社内の方が&lt;a href=&#34;https://github.com/t-k/gmo-payment-ruby&#34;&gt;gmo-payment-ruby&lt;/a&gt;にあてたモンキーパッチを紹介されていました。&lt;br&gt;
前職ではJavaを主に使っていて、外部のライブラリを使用するというよりも自社で自社仕様のライブラリを使う（もしくは作る）方が多かったので、&lt;br&gt;
今回初めてモンキーパッチという言葉を聞きました。&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;モンキーパッチ:1520bcef3e0cf7194b7be104b759d6c9&#34;&gt;モンキーパッチ&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;モンキーパッチは、オリジナルのソースコードを変更することなく、実行時に動的言語(例えばSmalltalk, JavaScript, Objective-C, Ruby, Perl, Python, Groovy, など)のコードを拡張したり、変更したりする方法である。
&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%A2%E3%83%B3%E3%82%AD%E3%83%BC%E3%83%91%E3%83%83%E3%83%81&#34;&gt;Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;方法:1520bcef3e0cf7194b7be104b759d6c9&#34;&gt;方法&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;紹介されたモンキーパッチでは、class_eval, module_eval (Module)を使用して実装していました&lt;br&gt;
&lt;a href=&#34;http://ref.xaio.jp/ruby/classes/module/class_eval&#34;&gt;http://ref.xaio.jp/ruby/classes/module/class_eval&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;話を受けて思ったこと:1520bcef3e0cf7194b7be104b759d6c9&#34;&gt;話を受けて思ったこと&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;モンキーパッチが呼び出されていることをコード見ただけでわかるか？&lt;br&gt;
運用・保守を行うフェーズを想定すると上記の観点を満たせるか、という点が大事になる気がしました。&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>RuboCopでコードの静的チェックをしてみた@ローカル</title>
      <link>http://blog.tackeyy.org/2016/05/19/run-rubocop-at-local</link>
      <pubDate>Thu, 19 May 2016 07:47:12 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/2016/05/19/run-rubocop-at-local</guid>
      <description>

&lt;p&gt;参加しているプロジェクトでSideCIを用いてGitHub上にPushした時にRuboCopを走らせています。&lt;br&gt;
&lt;a href=&#34;http://blog.tackeyy.org/post/2016-05-14/mailto-slack-from-sideci/&#34;&gt;SideCI（RuboCopの解析）の結果をSlack通知に通知する&lt;/a&gt;&lt;br&gt;
上記の記事の通りRuboCopのチェック結果（ソースへのコメント）がSlackに流れてくるので、だんだんうざくなってきました。&lt;br&gt;
たぶん自分でpushした結果が流れてくるならいいのですが、他の人からしたらうざったいだろうなと思い、ローカルでRuboCopを走らせるようにしました。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;rubocopをインストール:c70d9faebd769dcef536a9856ec7f8be&#34;&gt;RuboCopをインストール&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/bbatsov/rubocop#installation&#34;&gt;RuboCop&lt;/a&gt;&lt;br&gt;
&lt;br&gt;
&lt;code&gt;gem install rubocop&lt;/code&gt; これだけ。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;rubocopの結果が見にくい:c70d9faebd769dcef536a9856ec7f8be&#34;&gt;RuboCopの結果が見にくい&lt;/h3&gt;

&lt;p&gt;エディタはVimを使っているので、プラグインを探すと&lt;a href=&#34;https://github.com/ngmy/vim-rubocop&#34;&gt;こんなの&lt;/a&gt;があった。&lt;br&gt;
プラグインはNeoBundleで管理しているので、以下の行を~/.vimrcに足して完了。&lt;br&gt;
1. &lt;code&gt;NeoBundle &#39;ngmy/vim-rubocop&#39; &amp;quot;rubocop&lt;/code&gt;&lt;br&gt;
1. &lt;code&gt;NeoBundleInstall&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
あとは、&lt;code&gt;:RuboCop&lt;/code&gt;するだけ。&lt;br&gt;
quickfix windowが開くので、普通にRuboCop走らせて修正するより楽になりました。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
ほいじゃあの。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>