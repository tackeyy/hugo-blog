<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on F.C. BigDecimal | Web開発や読んだ本のはなし</title>
    <link>http://blog.tackeyy.org/post/</link>
    <description>Recent content in Posts on F.C. BigDecimal | Web開発や読んだ本のはなし</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Wed, 24 Aug 2016 19:17:41 +0900</lastBuildDate>
    <atom:link href="http://blog.tackeyy.org/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Googleアナリティクスで自分自身のアクセスを除外する方法</title>
      <link>http://blog.tackeyy.org/post/2016/08/24/googleanalytics-exclusion</link>
      <pubDate>Wed, 24 Aug 2016 19:17:41 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/post/2016/08/24/googleanalytics-exclusion</guid>
      <description>

&lt;p&gt;このブログもGoogleアナリティクスを導入しているのですが、&lt;br&gt;
いつも自分のアクセスがカウントされてしまうので、&lt;br&gt;
リアルな数値を見たくGoogleアナリティクスから&lt;br&gt;
自分自身のアクセスを除外する方法を試してみました。&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;方法:c0d25d311b4a490b27ac0be4fbdc506f&#34;&gt;方法&lt;/h3&gt;

&lt;p&gt;まあ、やっぱり有名なツールはググればちゃんとまとまった情報が出てきますね。&lt;br&gt;
というわけで、&lt;a href=&#34;https://www.alleyoop.co.jp/blog/googleanalytics-exclusion/&#34;&gt;Googleアナリティクスでアクセスを除外する3つの方法&lt;/a&gt;を参照ください。&lt;br&gt;
各方法のメリデメも記載してあり分かりやすいです。&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;このブログで採用した方法:c0d25d311b4a490b27ac0be4fbdc506f&#34;&gt;このブログで採用した方法&lt;/h3&gt;

&lt;p&gt;できるだけ簡単に導入できるため、chromeのアドオンで実現しました。&lt;br&gt;
基本的にスマホなどからはブログを見ないので、&lt;br&gt;
PCのブラウザ経由のアクセスのみカウントされなくてOKということもありました。&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;アドオン導入方法:c0d25d311b4a490b27ac0be4fbdc506f&#34;&gt;アドオン導入方法&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://tools.google.com/dlpage/gaoptout?hl=ja&#34;&gt;ここ&lt;/a&gt;にアクセス&lt;/li&gt;
&lt;li&gt;「Googleアナリティクス オプトアウト アドオンをダウンロード」をクリック&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>結婚式の持ち物 / 当日までに準備すべきこと</title>
      <link>http://blog.tackeyy.org/post/2016/08/19/todo-list-with-wedding</link>
      <pubDate>Fri, 19 Aug 2016 13:06:53 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/post/2016/08/19/todo-list-with-wedding</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;2016/08/20の結婚式後に加筆&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Todoにしておく理由については、&lt;a href=&#34;http://blog.tackeyy.org/post/2016/08/18/why-need-todo-list/&#34;&gt;こちら&lt;/a&gt;をご覧ください。&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;式当日まで:b672650d56ee11730867120bfd76e07b&#34;&gt;式当日まで&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;クリーニング

&lt;ul&gt;
&lt;li&gt;スーツ&lt;/li&gt;
&lt;li&gt;ネクタイ&lt;/li&gt;
&lt;li&gt;ハンカチ&lt;/li&gt;
&lt;li&gt;靴（汚かったら）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ご祝儀

&lt;ul&gt;
&lt;li&gt;ご祝儀袋&lt;/li&gt;
&lt;li&gt;袱紗（ふくさ）&lt;/li&gt;
&lt;li&gt;ピン札&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スーツがあるか確認

&lt;ul&gt;
&lt;li&gt;靴下&lt;/li&gt;
&lt;li&gt;下着&lt;/li&gt;
&lt;li&gt;ベルト&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;式当日:b672650d56ee11730867120bfd76e07b&#34;&gt;式当日&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;招待状&lt;/li&gt;
&lt;li&gt;ご祝儀&lt;/li&gt;
&lt;li&gt;リップクリーム&lt;/li&gt;
&lt;li&gt;ハンカチ&lt;/li&gt;
&lt;li&gt;kindle, 本&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;メモ:b672650d56ee11730867120bfd76e07b&#34;&gt;メモ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;転職時にシャツとか靴下とか全部捨ててたので、今回は&lt;/li&gt;
&lt;li&gt;みずほ銀行渋谷中央支店だと土日祝日でもピン札に両替できる(専用のATMがある）&lt;/li&gt;
&lt;li&gt;靴のかかとの修理、クリーニング、紐交換で5,500円くらいかかった@ミスターミニット&lt;/li&gt;
&lt;li&gt;友人として結婚式に参加する場合は、ブラウン系の靴でもいいらしい（まあ黒の方が無難だけど）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;買ったもの:b672650d56ee11730867120bfd76e07b&#34;&gt;買ったもの&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://amzn.to/2bfRbih&#34;&gt;ふくさ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;慶弔で両用できるものがいいと思い以下を購入。&lt;br&gt;
多分失くすから無くした時にまた買う。&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;終わりに:b672650d56ee11730867120bfd76e07b&#34;&gt;終わりに&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;- [ ]&lt;/code&gt; でcheckboxにならないのが辛い&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>作業の手順書 / TodoList化を通して生産性の向上を図りたい</title>
      <link>http://blog.tackeyy.org/post/2016/08/18/why-need-todo-list</link>
      <pubDate>Thu, 18 Aug 2016 13:25:39 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/post/2016/08/18/why-need-todo-list</guid>
      <description>

&lt;p&gt;作業効率を上げるひとつの方法として、掲題の手法が有用だと考えています。&lt;br&gt;
&lt;br&gt;
手順書によって作業手順に再現性を持たせることができ、&lt;br&gt;
ToDoListによって各手順の作業に抜け漏れがなくなるため、&lt;br&gt;
本来は不必要だった作業に時間をかけてしまったということがなく、&lt;br&gt;
またミスなく作業を進める（可能性を高める）ことにより、&lt;br&gt;
生産性が向上するはずだからです。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;本ポストでは、作業の手順書 / TodoList化を合わせてテンプレ化と表現します。&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;テンプレ化のイメージ:3ac6d7f2297d9f46414edb6f6b8246d5&#34;&gt;テンプレ化のイメージ&lt;/h3&gt;

&lt;p&gt;一般的に言う &lt;code&gt;業務手順書&lt;/code&gt; のようなイメージです。&lt;br&gt;
言語化すると、以下の条件を満たすものをイメージしています。&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;作業の順序およびフローがわかること&lt;/li&gt;
&lt;li&gt;作業することが一覧になっていること&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;どのような仕事においてテンプレ化すべきか:3ac6d7f2297d9f46414edb6f6b8246d5&#34;&gt;どのような仕事においてテンプレ化すべきか&lt;/h3&gt;

&lt;p&gt;基本的にほぼすべての仕事においてテンプレ化できることが理想だと思います。&lt;br&gt;
テンプレ化できる = 自分で行う必要がない(他人ができること) なので、&lt;br&gt;
そもそもその作業は自分以外の人にやってもらった方がいい仕事かもしれません。&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;仕事も私事もテンプレ化する:3ac6d7f2297d9f46414edb6f6b8246d5&#34;&gt;仕事も私事もテンプレ化する&lt;/h3&gt;

&lt;p&gt;仕事はできる限りテンプレ化しようと努めてるのですが、&lt;br&gt;
以下のような &lt;code&gt;頻度は低いが、度々調べてしまうような私事&lt;/code&gt; もテンプレ化すれば、&lt;br&gt;
&lt;code&gt;n回 x 調べる時間&lt;/code&gt; が節約できるはずだと思います。&lt;br&gt;
&lt;br&gt;
ポストして差し支えない内容であれば、&lt;br&gt;
どんどんテンプレ化してポストしていこうと思います。&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;参考図書:3ac6d7f2297d9f46414edb6f6b8246d5&#34;&gt;参考図書&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://amzn.to/2bC4jgp&#34;&gt;テンプレート仕事術―日常業務の７５％を自動化する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amzn.to/2bmCpUA&#34;&gt;アナタはなぜチェックリストを使わないのか？【ミスを最大限に減らしベストの決断力を持つ！】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>railsの*_pathと*_urlの違いについて</title>
      <link>http://blog.tackeyy.org/post/2016/08/16/differnce-between-path-and-url-on-rails</link>
      <pubDate>Tue, 16 Aug 2016 17:52:25 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/post/2016/08/16/differnce-between-path-and-url-on-rails</guid>
      <description>

&lt;p&gt;rails触りだしてから4か月くらい経ちましたが、&lt;br&gt;
もちろん &lt;code&gt;*_path&lt;/code&gt; と &lt;code&gt;*_url&lt;/code&gt; の違いくらいは知っていました。&lt;br&gt;
相対パス(&lt;em&gt;_path)か絶対パス（&lt;/em&gt;_url)の違いです。&lt;br&gt;
ただ、 &lt;code&gt;redirect_to&lt;/code&gt; の時は、 &lt;code&gt;*_url&lt;/code&gt; を使わないといけないということは全く知りませんでした。&lt;/p&gt;

&lt;h4 id=&#34;ことの発端:fe74660a3448d57694c76285b61db682&#34;&gt;ことの発端&lt;/h4&gt;

&lt;p&gt;プルリクをレビューしてもらった時に&lt;br&gt;
「 HTTPプロトコルの仕様上、&lt;code&gt;redirect_to&lt;/code&gt; の時は &lt;code&gt;*_url&lt;/code&gt; を使ってください」&lt;br&gt;
と指摘をいただきました。&lt;br&gt;
HTTPプロトコルの仕様ってなんですか？！と聞けず（普通自分で調べることですからね）、&lt;br&gt;
調べたことをメモしようと思った次第です。&lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;結論:fe74660a3448d57694c76285b61db682&#34;&gt;結論&lt;/h4&gt;

&lt;p&gt;上記のレビューのコメントを咀嚼する形で結論となくならば、以下のようになります。&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;そもそもrailsの &lt;code&gt;redirect_to&lt;/code&gt; ではHTTPステータスコード3xx系でリクエストを投げており、&lt;/li&gt;
&lt;li&gt;HTTPステータスコード3xx系の &lt;code&gt;Location: header&lt;/code&gt; は絶対パスである必要があるので、&lt;/li&gt;
&lt;li&gt;&lt;code&gt;redirect_to&lt;/code&gt; を使う時は、 &lt;code&gt;*_url&lt;/code&gt; で絶対パスを渡してあげる必要がある&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;参考:fe74660a3448d57694c76285b61db682&#34;&gt;参考&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/2350539/what-is-the-difference-between-url-and-path-while-using-the-routes-in-rails&#34;&gt;http://stackoverflow.com/questions/2350539/what-is-the-difference-between-url-and-path-while-using-the-routes-in-rails&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;最後に:fe74660a3448d57694c76285b61db682&#34;&gt;最後に&lt;/h4&gt;

&lt;p&gt;まだHTTP周りの知識が乏しくHTTPの規約で裏をとる、というようなことができてなかったり、&lt;br&gt;
不勉強さを痛感する今日この頃。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RailsのI18n（国際化対応）をやってみた</title>
      <link>http://blog.tackeyy.org/post/2016/08/15/i18n-on-rails</link>
      <pubDate>Mon, 15 Aug 2016 16:06:19 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/post/2016/08/15/i18n-on-rails</guid>
      <description>

&lt;p&gt;今回は国際化ではなくてviewに文字をベタ書きしたくないので、&lt;br&gt;
i18nを使用して &lt;code&gt;config/locales/ja.yml&lt;/code&gt; に定数をまとめました。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;i18nの方法は&lt;a href=&#34;http://railsguides.jp/i18n.html#i18n-api%E6%A9%9F%E8%83%BD%E3%81%AE%E6%A6%82%E8%A6%81&#34;&gt;Railsガイドのここ&lt;/a&gt;に記載されている通りです。&lt;br&gt;
要点だけ以下にまとめます。&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;もくじ:31de0bd2b8cce6f586d092770f51e881&#34;&gt;もくじ&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;default localを:jaにする&lt;/li&gt;
&lt;li&gt;ja.ymlのテンプレをDLする&lt;/li&gt;
&lt;li&gt;ja.ymlに定義した定数を呼び出してみる&lt;/li&gt;
&lt;li&gt;雑談&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;default-localを-jaにする:31de0bd2b8cce6f586d092770f51e881&#34;&gt;default localを:jaにする&lt;/h3&gt;

&lt;p&gt;特に設定を行っていない場合は、&lt;code&gt;config/application.rb&lt;/code&gt; が以下のようになっています。&lt;br&gt;
&lt;code&gt;# config.i18n.default_locale = :de&lt;/code&gt;&lt;br&gt;
日本語にする場合は以下のようにコメントを外してシンボルを変更します。&lt;br&gt;
&lt;code&gt;config.i18n.default_locale = :ja&lt;/code&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;ja-ymlのテンプレをdlする:31de0bd2b8cce6f586d092770f51e881&#34;&gt;ja.ymlのテンプレをDLする&lt;/h3&gt;

&lt;p&gt;以下のテンプレをDLします。&lt;br&gt;
内容は&lt;a href=&#34;https://github.com/svenfuchs/rails-i18n/blob/master/rails/locale/ja.yml&#34;&gt;ここ&lt;/a&gt;から確認できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget https://raw.github.com/svenfuchs/rails-i18n/master/rails/locale/ja.yml -P config/locales/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;wget&lt;/code&gt; をインストールしておらず &lt;code&gt;Mac OS&lt;/code&gt;を使っている場合は、&lt;br&gt;
以下のコマンドで &lt;code&gt;wget&lt;/code&gt; をinstallしてください。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew install wget&lt;/code&gt; &lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;default-localを-jaにする-1:31de0bd2b8cce6f586d092770f51e881&#34;&gt;default localを:jaにする&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;bundle exec rails c&lt;/code&gt; で動作確認してみます。&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;I18n.t(&#39;date.abbr_day_names&#39;)&lt;/code&gt;
&lt;code&gt;pry(main)&amp;gt; I18n.t(&#39;date.abbr_day_names&#39;)&lt;/code&gt;
&lt;code&gt;=&amp;gt; [&amp;quot;日&amp;quot;, &amp;quot;月&amp;quot;, &amp;quot;火&amp;quot;, &amp;quot;水&amp;quot;, &amp;quot;木&amp;quot;, &amp;quot;金&amp;quot;, &amp;quot;土&amp;quot;]&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;雑談:31de0bd2b8cce6f586d092770f51e881&#34;&gt;雑談&lt;/h3&gt;

&lt;p&gt;フォームの追加、詳細などは別のymlファイルにして管理しようとしたのですが、&lt;br&gt;
（ &lt;code&gt;I18n.t(&#39;form.buttons.show&#39;)&lt;/code&gt; のようなイメージ ）&lt;br&gt;
&lt;code&gt;config/locales/form/ja.yml&lt;/code&gt; を作成して、&lt;br&gt;
&lt;code&gt;config.i18n.load_path&lt;/code&gt; を変更してみてもダメでした.. &lt;br&gt;
modelごとにymlファイルを分割して管理できるのでできそうなのに。&lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gitで管理しているファイルを削除した場合のリカバリーコマンド</title>
      <link>http://blog.tackeyy.org/post/2016/08/14/recover-deleted-files-with-git</link>
      <pubDate>Sun, 14 Aug 2016 13:48:42 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/post/2016/08/14/recover-deleted-files-with-git</guid>
      <description>&lt;p&gt;Gitで管理しているファイルを削除した時にファイルを戻すコマンドのメモです。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;今までSubversionを使っていたので、バージョン管理で管理しているファイルを削除する = ゴミ箱に入るという認識でした。&lt;br&gt;
Gitの場合はブランチごとにファイルの情報をblobオブジェクトで管理しているので&lt;br&gt;
（ファイルを表示・非表示させているので）、&lt;br&gt;
ファイルを削除する = ファイルを非表示にするというようなイメージになります。&lt;br&gt;
&lt;br&gt;
非表示になっているファイルを元に戻すためには、以下のコマンドで戻せます。&lt;br&gt;&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/tackeyy/8c490f1da28c2dd05fa8279c7a5b9ecc.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>rpecの実行コマンド（部分実行も）のまとめ</title>
      <link>http://blog.tackeyy.org/post/2016/08/10/rspec-execution-commands</link>
      <pubDate>Wed, 10 Aug 2016 17:56:15 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/post/2016/08/10/rspec-execution-commands</guid>
      <description>&lt;p&gt;rspecでテストを書いていると、一部のテストだけ実行したい場合があります。&lt;br&gt;
rspecから少し離れるとすぐコマンドを忘れてしまうので備忘がてらメモしておきます。&lt;br&gt;&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/tackeyy/226c9cafb6b4fd1af6ec0d5001e89335.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;個人的に以下の二つの方法は試したことがなかった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/tackeyy/226c9cafb6b4fd1af6ec0d5001e89335#file-rspec-execution-commands-L4-L8&#34;&gt;https://gist.github.com/tackeyy/226c9cafb6b4fd1af6ec0d5001e89335#file-rspec-execution-commands-L4-L8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/tackeyy/226c9cafb6b4fd1af6ec0d5001e89335#file-rspec-execution-commands-L16&#34;&gt;https://gist.github.com/tackeyy/226c9cafb6b4fd1af6ec0d5001e89335#file-rspec-execution-commands-L16&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考：&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://rspec.info/&#34;&gt;http://rspec.info/&lt;/a&gt; &lt;br&gt;
&lt;a href=&#34;https://www.relishapp.com/rspec/rspec-core/v/3-5/docs/command-line&#34;&gt;https://www.relishapp.com/rspec/rspec-core/v/3-5/docs/command-line&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rspecでテストを書くときの雛形</title>
      <link>http://blog.tackeyy.org/post/2016/08/01/rspec-template</link>
      <pubDate>Mon, 01 Aug 2016 23:37:50 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/post/2016/08/01/rspec-template</guid>
      <description>

&lt;p&gt;最近Rspecでテストを書くことが増えているのですが、特別な処理がない限りある程度テスト内容が大体同じなのでは？と思っています。&lt;br&gt;
処理がほぼ同じなのであれば、雛形があった方が実装が早いので、雛形をメモしておく次第です。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;携わっているプロジェクトのコードですが(一部変更しています）、以下の点より業務に影響がないと判断しています。&lt;br&gt;
* adminは大体どのプロジェクトでも存在している（かつ特殊な処理を書いてない）&lt;br&gt;
* プロジェクトが特定される内容がない&lt;/p&gt;

&lt;h1 id=&#34;spec-controllers-rb:6ff7868729b37970419ff4b78ee766c0&#34;&gt;spec/controllers/&lt;strong&gt;/&lt;/strong&gt;.rb&lt;/h1&gt;

&lt;h2 id=&#34;普通のspecテストの雛形:6ff7868729b37970419ff4b78ee766c0&#34;&gt;普通のspecテストの雛形&lt;/h2&gt;

&lt;script src=&#34;https://gist.github.com/tackeyy/12d39610347ec2538481a18ce28d5ae5.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;rspec-x-factorygirl:6ff7868729b37970419ff4b78ee766c0&#34;&gt;Rspec x FactoryGirl&lt;/h2&gt;

&lt;script src=&#34;https://gist.github.com/tackeyy/f62dc34f6c037f6edde8fa8cbef05110.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;spec-models-rb:6ff7868729b37970419ff4b78ee766c0&#34;&gt;spec/models/*.rb&lt;/h1&gt;

&lt;h2 id=&#34;普通のspecテストの雛形-1:6ff7868729b37970419ff4b78ee766c0&#34;&gt;普通のspecテストの雛形&lt;/h2&gt;

&lt;script src=&#34;https://gist.github.com/tackeyy/8ce63b57638f2fc58f046e2b63a23f70.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;rspec-x-factorygirl-x-webmock:6ff7868729b37970419ff4b78ee766c0&#34;&gt;Rspec x FactoryGirl x WebMock&lt;/h2&gt;

&lt;script src=&#34;https://gist.github.com/tackeyy/05e71aadfa4cdbee157820c8553a2111.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Macの移行アシスタントを使用せずにiTunesを移行する方法</title>
      <link>http://blog.tackeyy.org/post/2016/07/31/mac%E3%81%AE%E7%A7%BB%E8%A1%8C%E3%82%A2%E3%82%B7%E3%82%B9%E3%82%BF%E3%83%B3%E3%83%88%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%9B%E3%81%9A%E3%81%ABitunes%E3%82%92%E7%A7%BB%E8%A1%8C%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95</link>
      <pubDate>Sun, 31 Jul 2016 19:00:26 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/post/2016/07/31/mac%E3%81%AE%E7%A7%BB%E8%A1%8C%E3%82%A2%E3%82%B7%E3%82%B9%E3%82%BF%E3%83%B3%E3%83%88%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%9B%E3%81%9A%E3%81%ABitunes%E3%82%92%E7%A7%BB%E8%A1%8C%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95</guid>
      <description>

&lt;h2 id=&#34;macの移行アシスタントを使わずにitunesの移行方法について:079113c14c373534b5c63a78165fc622&#34;&gt;Macの移行アシスタントを使わずにiTunesの移行方法について&lt;/h2&gt;

&lt;p&gt;path忘れちゃいそうなのでメモ。&lt;/p&gt;

&lt;h4 id=&#34;やり方:079113c14c373534b5c63a78165fc622&#34;&gt;やり方&lt;/h4&gt;

&lt;p&gt;以下の階層に全て音楽が入っているので移行元からデータを取ってきて移行先にコピーするだけ。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/Users/{user_name}/Music/iTunes/iTunes Media&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GitHubでhttpsでcloneしてしまったリポジトリをsshに変更する</title>
      <link>http://blog.tackeyy.org/post/2016/07/27/change-http-to-ssh-on-github</link>
      <pubDate>Wed, 27 Jul 2016 23:54:46 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/post/2016/07/27/change-http-to-ssh-on-github</guid>
      <description>

&lt;p&gt;時々なぜかhttpでcloneしてしまうことがあって、その都度どうやってsshにするんだっけ？となるのでメモ。&lt;/p&gt;

&lt;h1 id=&#34;現在のoriginの状態を確認する:97683f8d8522e9fdeccf47f363039e79&#34;&gt;現在のoriginの状態を確認する&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;git remote -v&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;sshに変更する:97683f8d8522e9fdeccf47f363039e79&#34;&gt;SSHに変更する&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;git remote set-url origin git@github.com:USERNAME/OTHERREPOSITORY.git&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;参考:97683f8d8522e9fdeccf47f363039e79&#34;&gt;参考&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://help.github.com/articles/changing-a-remote-s-url/&#34;&gt;https://help.github.com/articles/changing-a-remote-s-url/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>既存のディレクトリにrails newする</title>
      <link>http://blog.tackeyy.org/post/2016/07/26/create-rails-project-into-current-directry</link>
      <pubDate>Tue, 26 Jul 2016 23:43:17 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/post/2016/07/26/create-rails-project-into-current-directry</guid>
      <description>

&lt;p&gt;久しぶりに &lt;code&gt;rails new&lt;/code&gt; しようと思うといつも忘れるのでメモ。&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;コマンド:962c4973d6f910e32866bd7bc4d0cd23&#34;&gt;コマンド&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;rails new .&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;参考:962c4973d6f910e32866bd7bc4d0cd23&#34;&gt;参考&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://ltcmdr927.hatenablog.jp/entry/2014/04/10/174333&#34;&gt;http://ltcmdr927.hatenablog.jp/entry/2014/04/10/174333&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;そもそもディレクトリを作ってからじゃなくて、 &lt;code&gt;git clone&lt;/code&gt; すれば良い話なんだけど。&lt;br&gt;
&lt;br&gt;
以上。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>[WIP] graphvizでER図を書いてみる</title>
      <link>http://blog.tackeyy.org/post/2016/07/22/write-er-with-graphviz</link>
      <pubDate>Fri, 22 Jul 2016 21:34:47 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/post/2016/07/22/write-er-with-graphviz</guid>
      <description>

&lt;p&gt;個人のプロジェクトでテーブルレイアウトを作成したいと思いツールを探している時に&lt;br&gt;
&lt;a href=&#34;http://www.graphviz.org/&#34;&gt;graphviz&lt;/a&gt;というフローチャートやER図を描画するオープンソースのソフトウェアを見つけました。&lt;/p&gt;

&lt;p&gt;dot言語と言われる言語で&lt;code&gt;*.dot&lt;/code&gt;を作成して、&lt;code&gt;dot&lt;/code&gt;コマンドでコンパイルしてグラフを作成するようです。&lt;br&gt;
キャッチアップしてもすぐにコマンドなどを忘れてしまうので、概要から使い方まで簡単にメモしたいと思います。&lt;/p&gt;

&lt;p&gt;上記の他にも、下記のIndexに記載しているような内容がすぐに見つからずに、いつくかサイトを行き来したという経験もメモを残す動機になっています。&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;環境:c3f4b7f9fe75db9f39b0e9cb361c93c6&#34;&gt;環境&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;OS X El Capitan 10.11.4&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;index:c3f4b7f9fe75db9f39b0e9cb361c93c6&#34;&gt;Index&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;graphvizとは？&lt;/li&gt;
&lt;li&gt;グラフ生成までのワークフロー&lt;/li&gt;
&lt;li&gt;graphvizをインストールする&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*.dot&lt;/code&gt;ファイルを作成する&lt;/li&gt;
&lt;li&gt;サンプルとして簡単な図を描いてみる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*.dot&lt;/code&gt;ファイルをコンパイルする&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;graphvizとは:c3f4b7f9fe75db9f39b0e9cb361c93c6&#34;&gt;graphvizとは？&lt;/h1&gt;

&lt;p&gt;他の人の説明の方が上手なので引用します。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://www.graphviz.org/&#34;&gt;Graphviz&lt;/a&gt; は、人や物のネットワーク、フローチャート、系統樹などに適したグラフ描画ツールです。Windows、Mac、Linux など多くの OS で利用できます。
&lt;a href=&#34;http://www.showa-corp.jp/special/graphtools/graphviz.html&#34;&gt;http://www.showa-corp.jp/special/graphtools/graphviz.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;グラフ生成までのワークフロー:c3f4b7f9fe75db9f39b0e9cb361c93c6&#34;&gt;グラフ生成までのワークフロー&lt;/h1&gt;

&lt;h1 id=&#34;graphvizをインストールする:c3f4b7f9fe75db9f39b0e9cb361c93c6&#34;&gt;graphvizをインストールする&lt;/h1&gt;

&lt;h1 id=&#34;dot-ファイルを作成する:c3f4b7f9fe75db9f39b0e9cb361c93c6&#34;&gt;&lt;code&gt;*.dot&lt;/code&gt;ファイルを作成する&lt;/h1&gt;

&lt;h1 id=&#34;サンプルとして簡単な図を描いてみる:c3f4b7f9fe75db9f39b0e9cb361c93c6&#34;&gt;サンプルとして簡単な図を描いてみる&lt;/h1&gt;

&lt;h1 id=&#34;dot-ファイルをコンパイルする:c3f4b7f9fe75db9f39b0e9cb361c93c6&#34;&gt;&lt;code&gt;*.dot&lt;/code&gt;ファイルをコンパイルする&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>git commitを取り消す</title>
      <link>http://blog.tackeyy.org/post/2016/07/21/reset-git-commit</link>
      <pubDate>Thu, 21 Jul 2016 15:50:21 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/post/2016/07/21/reset-git-commit</guid>
      <description>

&lt;h1 id=&#34;間違えてdevelopにコミットしてもーた:ef37a109d09e802f7e8f24a9c200bdcb&#34;&gt;間違えてdevelopにコミットしてもーた&lt;/h1&gt;

&lt;p&gt;そんな時にいつもコミットの取り消し方をググるので備忘がてらメモ。&lt;/p&gt;

&lt;h1 id=&#34;コミットを取り消してワークディレクトリはそのままにする:ef37a109d09e802f7e8f24a9c200bdcb&#34;&gt;コミットを取り消してワークディレクトリはそのままにする&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;  git reset --soft HEAD^
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;コミットを取り消してワークディレクトリの内容も書き換える:ef37a109d09e802f7e8f24a9c200bdcb&#34;&gt;コミットを取り消してワークディレクトリの内容も書き換える&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;  git reset --hard HEAD^
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;その他:ef37a109d09e802f7e8f24a9c200bdcb&#34;&gt;その他&lt;/h1&gt;

&lt;p&gt;説明されてるページ見つけた。&lt;br&gt;
&lt;a href=&#34;http://d.hatena.ne.jp/mrgoofy33/20100910/1284069468&#34;&gt;http://d.hatena.ne.jp/mrgoofy33/20100910/1284069468&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ペットのトリミングサロンをまとめたウェブサイト</title>
      <link>http://blog.tackeyy.org/post/2016/07/16/pet-trimming-salons</link>
      <pubDate>Sat, 16 Jul 2016 18:48:19 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/post/2016/07/16/pet-trimming-salons</guid>
      <description>

&lt;h1 id=&#34;サイト名:fffba3e5c412f84190627849868b7a95&#34;&gt;サイト名&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;HotPetBeauty&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;要件:fffba3e5c412f84190627849868b7a95&#34;&gt;要件&lt;/h1&gt;

&lt;h2 id=&#34;user:fffba3e5c412f84190627849868b7a95&#34;&gt;user&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ペットサロンを探すことができる

&lt;ul&gt;
&lt;li&gt;都道府県、市区町村から探せる&lt;/li&gt;
&lt;li&gt;最寄駅から探せる&lt;/li&gt;
&lt;li&gt;評価が高いサロンを探せる&lt;/li&gt;
&lt;li&gt;予算から探せる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;お店の情報を確認することができる

&lt;ul&gt;
&lt;li&gt;サロン名や住所を確認できる&lt;/li&gt;
&lt;li&gt;店内やトリミング後のペットの写真を確認できる&lt;/li&gt;
&lt;li&gt;メニューを確認できる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;サロン予約ができる&lt;/li&gt;
&lt;li&gt;各店舗に問い合わせができる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;admin:fffba3e5c412f84190627849868b7a95&#34;&gt;admin&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;店舗情報やメニューを編集することができる&lt;/li&gt;
&lt;li&gt;予約管理ができる&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;mvp:fffba3e5c412f84190627849868b7a95&#34;&gt;MVP&lt;/h1&gt;

&lt;h2 id=&#34;user-1:fffba3e5c412f84190627849868b7a95&#34;&gt;user&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ペットサロンを探すことができる

&lt;ul&gt;
&lt;li&gt;特定の区で探すことができる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;admin-1:fffba3e5c412f84190627849868b7a95&#34;&gt;admin&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;特になし&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>楽しいRubyを読んでみた</title>
      <link>http://blog.tackeyy.org/post/2016/07/10/%E6%A5%BD%E3%81%97%E3%81%84ruby%E3%82%92%E8%AA%AD%E3%82%93%E3%81%A7%E3%81%BF%E3%81%9F</link>
      <pubDate>Sun, 10 Jul 2016 14:35:10 +0900</pubDate>
      
      <guid>http://blog.tackeyy.org/post/2016/07/10/%E6%A5%BD%E3%81%97%E3%81%84ruby%E3%82%92%E8%AA%AD%E3%82%93%E3%81%A7%E3%81%BF%E3%81%9F</guid>
      <description>

&lt;h4 id=&#34;気づいたこと:559440eef9f1bed3ad0423ed4b4940fe&#34;&gt;気づいたこと&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;コメントアウトは &lt;code&gt;=begin =end&lt;/code&gt; で書ける&lt;/li&gt;
&lt;li&gt;正規表現は、 ` /パターン/ =~ マッチングしたい文字列&lt;/li&gt;
&lt;li&gt;メソッドのスコープをプログラム上で変更できる&lt;/li&gt;
&lt;li&gt;alias,undef -&amp;gt; 継承先でこんなん使うとやばそう&lt;/li&gt;
&lt;li&gt;ダックタイピングについて調べる&lt;/li&gt;
&lt;li&gt;p.172 論理演算子の応用&lt;/li&gt;
&lt;li&gt;範囲演算子&lt;/li&gt;
&lt;li&gt;Proc引数&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;javaと違うこと:559440eef9f1bed3ad0423ed4b4940fe&#34;&gt;Javaと違うこと&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Javaで言うMap（HashMap, TreeMapとかとか）をRubyではハッシュって言う&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;シンボルっていつ使うんや&lt;/li&gt;
&lt;li&gt;loop, until, redoは使ったことない&lt;/li&gt;
&lt;li&gt;関数的メソッドってなんや&lt;/li&gt;
&lt;li&gt;ブロックつきメソッド yield p.117&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>